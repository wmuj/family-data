name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 代码格式检查
        run: npm run format

      - name: 类型检查
        run: npm run type-check

      - name: 构建检查
        run: npm run build

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行安全审计
        run: npm audit --audit-level=moderate

      - name: 运行 CodeQL 分析
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v3

  # Docker 构建
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.event_name == 'push'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/family-data:latest
            ${{ secrets.DOCKER_USERNAME }}/family-data:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到服务器
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /var/www/family-data
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker system prune -f

  # 健康检查
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 等待服务启动
        run: sleep 30

      - name: 健康检查
        run: |
          curl -f ${{ secrets.DEPLOY_URL }}/api/health || exit 1
          echo "✅ 部署成功，服务正常运行"